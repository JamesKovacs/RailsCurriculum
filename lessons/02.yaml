---
section_title: Introduction to Ruby
goal_title: Programming 101 & irb
goal: |

  By the end of this section you will:

  * be able to start up irb
  * do simple calculations in ruby
  * use and understand variables
  * use and understand collections
  * use loops
  * create hashes (name/value stores)
  * loop against a hash
  * create a Class & method
  * call a method
  * Open-up a core class & define new methods


steps: |

  Open up a terminal window and try the following:

      $ irb

      3 + 3
      7 * 6

      my_variable = 5

      my_variable + 2
      my_variable * 3

      puts my_variable

      fruits = ["kiwi", "strawberry", "plum"]

      fruits + ["orange"]
      fruits - ["kiwi"]

      fruits.each do |f|
        puts f
      end

      if my_variable > 1
        puts "YAY!"
      end

      some_hash = {1 => "Ruby", 2 => "Rails"}
      some_hash.keys
      some_hash.values
      some_hash.each do |k, v|
        puts "Key is #{k}, Value is #{v}"
      end

      class Workshop
        def topic
          'Ruby AND Rails'
        end
      end
      w = Workshop.new
      w.topic

      a = "the duck"
      a.class
      a.is_a?(Array)
      a.methods
      => [:<=>, :==, :===, :eql?, :hash, :casecmp, :+, :*, :%, :[], :[]=, :insert, :length, :size...]

      a.quack
      class String
        def quack
          puts "Quack! says #{self}"
        end
      end
      a.quack

      class RailsWorkshop < Workshop
        def fun?
          true
        end
      end

      c = RailsWorkshop.new
      puts c.fun?


explanation: |

  * irb
    * Starts up the **I**nteractive **R**u**b**y Shell an environment where you can try bits of ruby code and they'll be run automatically.
  * `3 + 3` and `7 * 6`
    * Ruby can do simple math automatically.  `*` is used for multiplication and `/` for division.
  * `my_variable = 5`
    * variables are words that hold information.  Here we're holding a 5 with the words my_variable
  * `my_variable + 2` and `my_variable * 3`
    * Ruby remembers that we are holding a `5` with the words `my_variable` and can use that `5` do to math
  * `puts my_variable`
    * puts prints the value of what comes after it.  In this case it should print 5 since `my_variable` is holding a `5`
  * `fruits = ["kiwi", "strawberry", "plum"]`
    * Variables can also hold more than one value.  Here were using the variable fruits to hold a collection of fruit names.  This type of collection is called an array.
  *  `fruits + ["orange"]` and `fruits - ["kiwi"]`
    * \+ and - are called operators.  We can use them with the array of fruits just like we can use them with numbers.
  * `fruits.each do |f|`
    * This code goes through the fruits array item by item and runs the code between do and end for each item.  These lines should print a list of the fruits.
  * `if my_variable > 1 then puts foo end`
    * This prints "foo" if the value stored in `my_variable` is greater than 1.  Since the code only runs when certain conditions are met if is called a conditional.
  * `some_hash = {1 => "Ruby", 2 => "Rails"}`
    * creates a hash and assigns it to variable `some_hash`
  * `some_hash.keys` and `some_hash.values`
    * calls methods for this hash that returns a list of keys and values
  * `some_hash.each ... end`
    * Looks against the hash and displays the key and value
    * the call `puts "Key is #{k}, Value is #{v}"` is equivalent to `puts "Key is " + k.to_s + ", Value is " + v.to_s
  * `class Workshop...end`
    * the Ruby way of defining a class
  * `def topic...end`
    * the Ruby way of defining a method
  * `class RailsWorkshop < Workshop ... end`
    * the Ruby way of defining a class that inherits from another


  ### online resources

  * Google - searching "ruby" and whatever you're looking for usually leads to good stuff.
  * [Ruby Quickref](http://www.zenspider.com/Languages/Ruby/QuickRef.html)
  * [Ruby Koans](http://rubykoans.com/) - a great set of lessons in an interactive form.
  * [Learn to Program by Chris Pine](http://pine.fm/LearnToProgram) - also available as [a book](http://pragprog.com/book/ltp2/learn-to-program).
  * [The Pickaxe](http://pragprog.com/book/ruby3/programming-ruby-1-9) - The definitive ruby reference (and has a great tutorial too).
  * [Why's (poignant) Guide to Ruby](http://www.scribd.com/doc/8545174/whys-Poignant-Guide-to-Ruby) - the (crazy) guide to ruby... Try it, you might like it.

